openapi: 3.0.0
info:
  title: My API
  description: API documentation for My Application
  version: 1.0.0

servers:
  - url: http://127.0.0.1:8000

security:
  - jwt: []

components:
  securitySchemes:
    jwt:
      type: http
      scheme: bearer
      bearerFormat: JWT

paths:
  /users:
    get:
      summary: Retrieve all users
      security:
        - jwt: []
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
            text/plain:
              example: List of all users.

  /users/{id}:
    get:
      summary: Retrieve a single user by ID
      security:
        - jwt: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
          description: ID of the user to retrieve
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            text/plain:
              example: User not found.

paths:
  /posts:
    get:
      summary: Retrieve all posts
      security:
        - jwt: []
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Post'
            text/plain:
              example: List of all posts.

    post:
      summary: Create a new post
      security:
        - jwt: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewPost'
      responses:
        '201':
          description: Post created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Post'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            text/plain:
              example: Bad request.

  /posts/{id}:
    get:
      summary: Retrieve a single post by ID
      security:
        - jwt: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
          description: ID of the post to retrieve
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Post'
        '404':
          description: Post not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            text/plain:
              example: Post not found.

    put:
      summary: Update an existing post
      security:
        - jwt: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
          description: ID of the post to update
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdatePost'
      responses:
        '200':
          description: Post updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Post'
        '404':
          description: Post not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            text/plain:
              example: Post not found.

    delete:
      summary: Delete a post by ID
      security:
        - jwt: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
          description: ID of the post to delete
      responses:
        '200':
          description: Post deleted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Success'
        '404':
          description: Post not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            text/plain:
              example: Post not found.

components:
  schemas:
    User:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        email:
          type: string
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time

    Post:
      type: object
      properties:
        id:
          type: integer
        title:
          type: string
        content:
          type: string
        user_id:
          type: user_id:
          type: integer
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
        user:
          $ref: '#/components/schemas/User'

    NewPost:
      type: object
      required:
        - title
        - content
        - user_id
      properties:
        title:
          type: string
        content:
          type: string
        user_id:
          type: integer

    UpdatePost:
      type: object
      properties:
        title:
          type: string
        content:
          type: string
        user_id:
          type: integer

    Error:
      type: object
      properties:
        error:
          type: string

    Success:
      type: object
      properties:
        success:
          type: string
